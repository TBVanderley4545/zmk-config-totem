//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Layer_1     1
#define Layer_2     2
#define Layer_3     3

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
           &kp Q             &kp W       &kp E        &kp R           &kp T            &kp Y      &kp U            &kp I        &kp O       &kp P
           &hm LEFT_SHIFT A  &hm LALT S  &hm LCTRL D  &hm LEFT_GUI F  &kp G            &kp H      &hm RIGHT_GUI J  &hm RCTRL K  &hm RALT L  &hm RIGHT_SHIFT SEMICOLON
&kp GRAVE  &kp Z             &kp X       &kp C        &kp V           &kp B            &kp N      &kp M            &kp COMMA    &kp DOT     &kp SLASH                  &kp APOS
                                         &kp ESCAPE   &mo 1           &kp BACKSPACE    &kp SPACE  &mo 2            &kp ENTER
            >;
        };

        Layer_1 {
            label = "Layer_1";
            bindings = <
           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8   &kp NUMBER_9      &kp N0
           &trans        &trans        &trans        &trans        &trans    &trans        &trans        &trans         &trans            &trans
&kp MINUS  &trans        &trans        &trans        &trans        &trans    &trans        &trans        &kp BACKSLASH  &kp LEFT_BRACKET  &kp RBKT  &kp EQUAL
                                       &trans        &trans        &trans    &kp TAB       &trans        &trans
            >;
        };

        Layer_2 {
            label = "Layer_2";
            bindings = <
         &kp F1    &kp F2   &kp F3    &kp F4     &kp F5          &kp F6  &kp F7    &kp F8  &kp F9     &kp F10
         &trans    &trans   &trans    &trans     &kp CAPSLOCK    &trans  &trans    &trans  &trans     &trans
&kp F11  &kp HOME  &kp END  &kp LEFT  &kp RIGHT  &trans          &trans  &kp DOWN  &kp UP  &kp PG_DN  &kp PG_UP  &kp F12
                            &trans    &trans     &kp DELETE      &trans  &trans    &trans
            >;
        };

        Layer_3 {
            label = "Layer_3";
            bindings = <
        &kp C_PREV            &kp C_NEXT            &kp C_PLAY_PAUSE  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &kp C_VOLUME_DOWN     &kp C_VOL_UP          &kp K_MUTE        &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans            &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                                    &trans            &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Reveal_Layer_3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
